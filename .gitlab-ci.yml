variables:
  REPO_NAME: github.com/mendersoftware/mender-demo-artifact
  GITHUB_RELEASE_BINARY: mender-demo-artifact
  GITHUB_RELEASE_DEPLOY_REPO: mendersoftware/mender-demo-artifact
  MENDER_VERSION: 'mender-3.2.1'
  MENDER_ARTIFACT_VERSION: '3.7.0'
  INTEGRATION_VERSION: '3.2.1'
  ARTIFACT_NAME: mender-demo-artifact-$INTEGRATION_VERSION
  MENDER_DEB_VERSION: '3.2.1'
  S3_BUCKET_NAME: "mender-demo-artifacts"

stages:
  - build
  - test
  - publish

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits-signoffs.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

build:
  stage: build
  image: docker:git
  services:
    - docker:19.03.5-dind
  script:
    - docker build -t mender-demo-artifact --build-arg MENDER_ARTIFACT_VERSION=$MENDER_ARTIFACT_VERSION --build-arg MENDER_VERSION=$MENDER_VERSION --build-arg ARTIFACT_NAME=$ARTIFACT_NAME .
    # Extract artifact
    - mkdir output
    - docker run --rm -v $PWD/output:/output mender-demo-artifact
  artifacts:
    paths:
      - output/mender-demo-artifact.mender

test:acceptance:
  stage: test
  image: docker:19.03-dind
  tags:
    - mender-qa-slave
  dependencies:
    - build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    # DinD setup in mender-qa-slave
    - unset DOCKER_HOST
    - unset DOCKER_TLS_VERIFY
    - unset DOCKER_CERT_PATH
    # Start dockerd in the background
    - /usr/local/bin/dockerd &
    # Wait for dockerd to start
    - |-
      MAX_WAIT=30
      while [ ! -e "/var/run/docker.sock" ] && [ $MAX_WAIT -gt 0 ]; do
        MAX_WAIT=$(($MAX_WAIT - 1))
        sleep 1
      done
    # Verify that the docker server is up and running
    - docker version
    # Git submodules
    - apk add git
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - apk add --update python3 py3-pip bash gcc openssh make openssl-dev
      libffi-dev libc-dev python3-dev musl-dev rust cargo
    - pip3 install --upgrade pip
    - cd tests
    - pip3 install -r requirements.txt
    - python3 -m pytest -v --mender-version $MENDER_VERSION --mender-deb-version $MENDER_DEB_VERSION

publish:s3:
  stage: publish
  image: debian:buster
  dependencies:
    - build
  before_script:
    - apt update && apt install -yyq awscli
  script:
    - echo "Publishing ${INTEGRATION_VERSION} version to S3"
    - aws s3 cp output/mender-demo-artifact.mender
        s3://$S3_BUCKET_NAME/mender-demo-artifact.mender
    - aws s3api put-object-acl --acl public-read --bucket $S3_BUCKET_NAME
        --key mender-demo-artifact.mender
    - aws s3 cp output/mender-demo-artifact.mender
        s3://$S3_BUCKET_NAME/$INTEGRATION_VERSION/mender-demo-artifact.mender
    - aws s3api put-object-acl --acl public-read --bucket $S3_BUCKET_NAME
        --key $INTEGRATION_VERSION/mender-demo-artifact.mender
  only:
    - master
